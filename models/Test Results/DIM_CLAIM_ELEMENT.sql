{{ config( 
post_hook = ("
ALTER TABLE EDW_STAGING_DIM.DIM_CLAIM_ELEMENT ADD PRIMARY KEY (CLAIM_ELEMENT_HKEY);
ALTER TABLE EDW_STAGING_DIM.DIM_CLAIM_ELEMENT MODIFY CLAIM_ELEMENT_HKEY SET NOT NULL;
ALTER TABLE EDW_STAGING_DIM.DIM_CLAIM_ELEMENT MODIFY LOAD_DATETIME SET NOT NULL;
ALTER TABLE EDW_STAGING_DIM.DIM_CLAIM_ELEMENT MODIFY PRIMARY_SOURCE_SYSTEM VARCHAR(); 
INSERT INTO EDW_STAGING_DIM.DIM_CLAIM_ELEMENT (CLAIM_ELEMENT_HKEY, FILING_SOURCE_DESC, FILING_MEDIA_DESC, COMBINED_CLAIM_IND, FIREFIGHTER_CANCER_IND, SB229_IND, EMPLOYER_PREMISES_IND, EMPLOYER_PAID_PROGRAM_ENROLLMENT_DESC, EMPLOYER_PAID_PROGRAM_TYPE, EMPLOYER_PAID_PROGRAM_REASON LOAD_DATETIME, PRIMARY_SOURCE_SYSTEM) SELECT MD5($1), MD5($2), $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13 FROM VALUES ('99999', '99999', 'UNKNOWN', 'UNKNOWN', 'U', 'U', 'U', 'U', 'UNKNOWN', 'UNKNOWN', 'UNKNOWN',  SYSDATE(), 'MANUAL ENTRY');
")  
) }}

 WITH  SCD AS ( 
	SELECT  UNIQUE_ID_KEY
	, last_value(FILING_SOURCE_DESC) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as FILING_SOURCE_DESC 
	, last_value(FILING_MEDIA_DESC) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as FILING_MEDIA_DESC 
	, last_value(FIREFIGHTER_CANCER_IND) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as FIREFIGHTER_CANCER_IND 
	, last_value(COMBINED_IND) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as COMBINED_IND 
	, last_value(SB223_IND) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as SB223_IND 
	, last_value(EMPLOYER_PREMISES_IND) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as EMPLOYER_PREMISES_IND 
	, last_value(EMPLOYER_PAID_PROGRAM_ENROLLMENT_DESC) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as EMPLOYER_PAID_PROGRAM_ENROLLMENT_DESC 
	, last_value(EMPLOYER_PAID_PROGRAM_TYPE) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as EMPLOYER_PAID_PROGRAM_TYPE 
	, last_value(EMPLOYER_PAID_PROGRAM_REASON) over 
            (partition by UNIQUE_ID_KEY 
              order by dbt_updated_at 
                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as EMPLOYER_PAID_PROGRAM_REASON
	    , DBT_VALID_FROM AS EFFECTIVE_TIMESTAMP
    	, DBT_VALID_TO   AS END_TIMESTAMP
    	,
    	  CASE WHEN CAST(DBT_VALID_FROM AS DATE) = '1901-01-01' then cast( DBT_VALID_FROM AS DATE )
    	    WHEN cast( DBT_VALID_FROM AS DATE ) <> '1901-01-01' THEN dateadd(day,1,CAST(DBT_VALID_FROM AS DATE))
    	  else cast( DBT_VALID_FROM AS DATE ) end as EFFECTIVE_DATE
    	, cast( DBT_VALID_TO AS DATE ) as END_DATE
    	, CASE WHEN DBT_VALID_TO IS NULL THEN 'Y' ELSE 'N' END AS CURRENT_INDICATOR
     
	FROM {{ ref('DIM_CLAIM_ELEMENT_SCDALL_STEP2') }})

select * from SCD
